#include "CMSIS_DSP.h"

#define SAMPLE_BUFFER_LENGTH        4096
#define SAMPLE_BUFFER_LENGTH_HALF   (SAMPLE_BUFFER_LENGTH/2)
#define SAMPLING_RATE               48000

float fft_input[SAMPLE_BUFFER_LENGTH];
float fft_output[SAMPLE_BUFFER_LENGTH];
float fft_power[SAMPLE_BUFFER_LENGTH_HALF];

uint8_t     ifftFlag                = 0;
float       frequency_resolution    = (float)SAMPLING_RATE / (float)SAMPLE_BUFFER_LENGTH;

void setup() {
    /* write signal to array */
    for (int i = 0; i < SAMPLE_BUFFER_LENGTH; i++) {
        float r = (float)i / (float)SAMPLING_RATE;
        r *= 3.14159265359 * 2;
        r *= 880; // frequency in Hz
        float s = sin(r) + sin(r * 4) * 0.5 + sin(r * 3) * 0.25;
        fft_input[i] = s;
    }

    /* analyze signal */
    arm_rfft_fast_instance_f32 fft;
    arm_rfft_fast_init_f32(&fft, SAMPLE_BUFFER_LENGTH);
    arm_rfft_fast_f32(&fft, fft_input, fft_output, ifftFlag);
    arm_cmplx_mag_f32(fft_output, fft_power, SAMPLE_BUFFER_LENGTH_HALF);
    for (int i = 1; i < SAMPLE_BUFFER_LENGTH_HALF; i++) {
        Serial.printf("%i\tfrq: %.1f\tenergy %.6f\r\n", i, i * frequency_resolution, fft_power[i]);
    }
    
    /* find dominant frequency */
    float32_t   maxValue;
    uint32_t    maxIndex;
    arm_max_f32(fft_power, SAMPLE_BUFFER_LENGTH_HALF, &maxValue, &maxIndex);
    Serial.printf("\r\n");
    Serial.printf("max power: %f\r\n", maxValue);
    Serial.printf("max index: %i\r\n", maxIndex);
    Serial.printf("frequency: %f\r\n", (maxIndex * frequency_resolution));
}